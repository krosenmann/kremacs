#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+TITLE: KrEmacss: Krosenmann's Emacs dotfiles
#+DATE: <2018-11-04 Вс>
#+AUTHOR: krosenmann
#+EMAIL: krosenmann@gmail.com
#+LANGUAGE: ru
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 27.0.50 (Org mode 9.1.9)
#+PROPERTY: header-args :results none
#+PROPERTY: header-args+ :noweb no-export 
#+PROPERTY: header-args+ :tangle src/init.el

* Установка
  Сначала определяем архивы с пакетами, они будут использоваться для
  проверки и установки пакетов. 
  #+BEGIN_SRC elisp 
    (require 'package)
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
    (package-initialize)
  #+END_SRC
  
  Конфигурация сильно завязана на внешние пакеты, поэтому перед
  запуском проверяем их наличие, и устанавалием при отсутствии.
  [[https://stackoverflow.com/a/10095853/7269114][Источник]]
  #+BEGIN_SRC elisp
    (defun ensure-package-installed (&rest packages)
      "Assure every package is installed, ask for installation if it’s not.

    Return a list of installed packages or nil for every skipped package."
      (mapcar
       (lambda (package)
	 ;; (package-installed-p 'evil)
	 (if (package-installed-p package)
	     nil
	   (if (y-or-n-p (format "Package %s is missing. Install it? " package))
	       (package-install package)
	     package)))
       packages))

    ;; make sure to have downloaded archive description.
    ;; Or use package-archive-contents as suggested by Nicolas Dudebout
    (or (file-exists-p package-user-dir)
	(package-refresh-contents))

    (ensure-package-installed 
     '<<Зависимости>>
    )

    ;; activate installed packages
  #+END_SRC
  
* Core
  Отключить меню и тулбар для экономии места
  #+BEGIN_SRC elisp
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (setq auto-save-default nil)
  #+END_SRC

  Мне нравится переключаться между окнами циклически через =S-f3=. Для
  nowindow-версии емакса это сочетание дает =f15=
  #+BEGIN_SRC elisp
  (global-set-key (kbd "S-<f3>") 'other-window)
  (global-set-key (kbd "<f15>") 'other-window)
  #+END_SRC

  UTF-8, как основная кодировка, и пара обязательных параметров для посдветки
  скобок.
  #+BEGIN_SRC elisp
  (prefer-coding-system 'utf-8)
  (setq show-paren-style 'expression)
  (show-paren-mode 2)
  #+END_SRC

  Сохранение ~custom-set-variables~ в спец. файле
  #+BEGIN_SRC elisp
    (setq custom-file "~/.emacs.d/custom-file.el")
    (load custom-file 'noerror)
  #+END_SRC
** Внешний вид
   Показывать номера строк 
   #+BEGIN_SRC elisp
   (setq linum-format "%d")
   (global-linum-mode 1)
   #+END_SRC
*** COMMENT Темы
    Время от времени, я меняю темы, чтобы не приедалось.
    Темы я выбираю попарно: для работы-работы, и работа-дома, то есть до кучи переключаюсь между двумя в течении дня.
    Список тем и паков, которые мне приглянулись за время работы в Emacs:
    #+NAME: Зависимости
    #+BEGIN_SRC elisp :tangle no
      cyberpunk-theme
      doom-themes
      dracula-theme
      eink-theme
      leuven-theme
    #+END_SRC
*** modeline
    В качестве mode line мне больше всего приглянулся проект [[https://github.com/dbordak/telephone-line][telephone-line]]
    #+NAME: Зависимости
    #+BEGIN_SRC elisp :tangle no
      telephone-line
    #+END_SRC

    Настраивать можно только перед запуском
    #+BEGIN_SRC elisp
      (defface telephone-line-projectile
	'((t (:foreground "red" :bold t :inherit mode-line)))
	"Hightlight face for the projectile segment"
	:group 'telephone-line)

      (require 'telephone-line)
      (telephone-line-mode 1)
    #+END_SRC
* Работа с документацией (Info-mode)
   
* Org-mode
  Устанавливаем последнюю версию полного (почти) комплекта орг-мода
  #+NAME: Зависимости
  #+BEGIN_SRC elisp :tangle no
    org-plus-contrib
  #+END_SRC
  
 
** Как органайзер
   Для использования в качестве органайзера, цепляем Agenda View, биндим на синхронизирующиеся с Orgzly файлы, и зададим некоторые дополнительные ключевые слова для более удобной работы. Желательно добавить их и в orgzly.
   #+BEGIN_SRC elisp
     (define-key global-map "\C-ca" 'org-agenda)
     (setq org-agenda-files (list "~/Dropbox/docs"))
     (setq org-log-done t)
     (setq org-todo-keywords '((sequence "TODO" "IN_PROCESS" "FEEDBACK" "|" "DONE" "CANCELED")))
   #+END_SRC
  
* Программирование
** Работа с проектами  
** Контроль версий
** Lisp
** Python
** C
** Rust

* 
** Почта
** twitter
** 
