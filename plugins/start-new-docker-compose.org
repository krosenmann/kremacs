#+TITLE: Ede CI Projects support
#+AUTHOR: Roman Zayrullin
#+EMAIL: krosenmann@gmail.com
#+STARTUP: showall
#+LaTeX_ClASS_OPTIONS: [11pt,a4paper,ubuntu]
#+LaTeX_HEADER:\usepackage[scale=0.75]{geometry}
#+LaTeX_HEADER:\usepackage[utf-8]{inputrec}
* TODO Апгрейд для прожектайла для определения типа проекта
* Поддержка контейнеризованных проектов в EDE
  #+begin_src emacs-lisp :tangle yes
    (global-ede-mode t)
    (ede-enable-generic-projects)
    (require 'ede/generic)

    (defclass ede-ci-project (ede-generic-project)
      ((buildfile :initform "Makefile.docker"))
      "Docker CI Project.")

    (defmethod ede-generic-setup-configuration ((proj ede-ci-project) config)
      "Setup a configuration Make for docker"
      (oset config build-command "make"))

    (ede-generic-new-autoloader "generic-ci" "CI-docker")
  #+end_src
  ЕDE создает мейкфайл с

* Docker targets for EDE
#+begin_src emacs-lisp :tangle yes
  (defvar ede-docker-compiler
    (ede-compiler
     "ede-docker-compiler"
     :name "docker-compose"
     ;; :variables '(("Make" . "make"))
     :commands '("docker-compose")))
#+end_src

#+RESULTS:
: ede-docker-compiler

* Описание контейнера для проекта
** Создание Dockerfile
   Запуск компоновки Docker ~M-x dockerize-current-project~
   В диалоговом меню задаются все необходимые параметры и значения.
   #+name: dialog-menu   
   #+begin_src emacs-lisp 
     (defun imentend-dialog-menu (param-name param-default-value)
       (let((param-values 'nil)
            (readed-value '()))
         (setq readed-value (read-string (concat param-name " ")))
         (if (not (equal readed-value ""))
             (progn
               (add-to-list 'param-values 'readed-value)
               (imentend-dialog-menu param-name))
           (add-to-list 'param-values 'param-default-value))
         '(param-values)))
   #+end_src
   
   #+name docker-param-list
   #+begin_src emacs-lisp :tangle yes :noweb yes
     (defvar docker-param-tree
       '( ("FROM" "python:3.5")
           ("ENV" "PYTHONBUFFER 1")
           ("WORKDIR" "/srv/pollycrm")
           ("ARG" "DEPLOY_KEY=docker/pollycrm/.ssh/id_rsa")
           ("COPY" "requirements.txt requirements.txt")
           ("RUN" "curl -sL https://deb.nodesource.com/setup_8.x | bash \
      && apt-get install -y nodejs rsync \
      && npm install -g bower \
      && pip install --no-cache-dir -r requirements.txt \
      && rm -fr /var/lib/apt/lists/* /tmp/* /var/tmp/*")
           ("ENTRYPOINT" "./manage.py")
           ("COPY" ". .")
           ("RUN" "npm update \
      && bowerupdate --allow-root")
           ))
   #+end_src

   #+RESULTS:
   : docker-param-tree
   
   #+name dockerize-current-project
   #+begin_src emacs-lisp :tangle yes :noweb yes
     <<dialog-menu>>
     <<docker-param-list>>
     (defun dockerize-current-project (docker-param-list)
       "Dialog-mode for creating new dockerfile"
       (interactive)
       (beginning-of-buffer)
       (mapcar 'imentend-dialog-menu 'docker-param-list))
   #+end_src

   #+RESULTS:
   : dockerize-current-project
   
   #+name test
   #+begin_src emacs-lisp :noweb yes
     <<dockerize-current-project>>
     (dockerize-current-project docker-param-tree)
   #+end_src

   - Опционально: docker-compose
   - Jenkinsfile
