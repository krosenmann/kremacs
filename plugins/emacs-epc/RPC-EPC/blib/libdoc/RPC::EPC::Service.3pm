.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RPC::EPC::Service 3pm"
.TH RPC::EPC::Service 3pm "2015-11-29" "perl v5.20.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
RPC::EPC::Service \- An Asynchronous Remote Procedure Stack.
.SH "VERSION"
.IX Header "VERSION"
This document describes RPC::EPC::Service version 0.0.4
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SS "Server code"
.IX Subsection "Server code"
.Vb 1
\&    use RPC::EPC::Service;
\&    
\&    my $server = RPC::EPC::Service\->new(8888, {
\&        \*(Aqadd\*(Aq => sub {
\&            my $args_ref = shift;
\&            my ($a,$b) = @$args_ref;
\&            return $a + $b;
\&        });
\&    $server\->start;
.Ve
.SS "Client code"
.IX Subsection "Client code"
.Vb 1
\&    use RPC::EPC::Service;
\&    
\&    my $client = RPC::EPC::Service\->new($port,{});
\&    $client\->client_start;
\&    
\&    my $ret = $client\->call_method(\*(Aqadd\*(Aq, [1,2]);
\&    $ret\->recv == 3;
\&    
\&    $client\->stop;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module enables to connect the other process with the S\-expression
protocol, like the Swank protocol of the \s-1SLIME.\s0
.PP
\&\s-1SLIME :\s0 http://common\-lisp.net/project/slime/
.PP
The primary objective is for users to make some Emacs extensions with
the Perl and \s-1CPAN.\s0
.SS "Protocol"
.IX Subsection "Protocol"
The encoding format is the S\-expression.
.PP
The \s-1TCP\s0 socket is employed by the communication.
.PP
Because the \s-1RPC\s0 session is written in the async manner, the programs
can call the procedures asynchronously.
.SS "Object Serialization"
.IX Subsection "Object Serialization"
This module can translate following types:
.IP "\(bu" 4
undef
.IP "\(bu" 4
Number
.IP "\(bu" 4
String
.IP "\(bu" 4
Array
.IP "\(bu" 4
Hash
.IP "\(bu" 4
Complex of Array and Hash.
.SH "INTERFACE"
.IX Header "INTERFACE"
.SS "Server and Client Commons"
.IX Subsection "Server and Client Commons"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\&  $service = RPC::EPC::Service\->new($port, $handlers);
.Ve
.PP
Create a server object. If port number is 0 or undef, the number is
decided by the \s-1OS.\s0
.PP
The \f(CW$handlers\fR object is a hash of method names and sub blocks,
which methods are called by the peer process. Methods can be also 
defined by \f(CW\*(C`define_method\*(C'\fR after the initialization.
.PP
\fIdefine_method\fR
.IX Subsection "define_method"
.PP
.Vb 1
\&  $service\->define_method($method_name, sub { .... });
.Ve
.PP
Define a method which is called by the peer process.
.PP
The following form defines a method with documents for the method
argument and specifications.
.PP
.Vb 4
\&  $service\->define_method($method_name,
\&      sub { .... },
\&      "arg1 arg2",
\&      "document for this method");
.Ve
.PP
The documents are referred by the peer process for users to inspect the methods.
.PP
\fIcall_method\fR
.IX Subsection "call_method"
.PP
.Vb 2
\&  $ret = $service\->call_method($method_name, $args);
\&  print $ret\->recv;
.Ve
.PP
Call the peer's method. The arguments should be packed in one object,
such as Array and Hash.
.PP
This method returns immediately, not waiting for the result, and value
\&\f(CW$ret\fR is \f(CW\*(C`AnyEvent::condvar\*(C'\fR object. To obtain the result, the
program calls the \f(CW\*(C`recv\*(C'\fR method, because the peer's task is executed
concurrently and the result is sent asynchronously.
.PP
The \f(CW\*(C`recv\*(C'\fR method may raise the error. The error has two types, the
peer's program (Application Error) and the \s-1RPC\s0 stack (\s-1RPC\s0 Error).
.PP
The Application Error is a normal error which is caused by peer's
program, such as 'division by zero', 'file not found' and so on. The
programmers are responsible to this type errors, recovering error
handling or just fixing bugs.
.PP
The \s-1RPC\s0 Error is a communication error which is caused by \s-1RPC\s0 stack,
such as 'connection closed', 'method not found', 'serialization error'
and so on. This type errors are caused by environment problems, bugs
of peer's program, our side one or the \s-1RPC\s0 stack.
.PP
Here is a sample robust code:
.PP
.Vb 10
\&  $ret = $service\->call_method($method_name, $args);
\&  eval {
\&    print $ret\->recv; # normal result
\&  };
\&  if ($@) {
\&    # Error handling
\&    if ($@\->[0] eq "ERROR") {
\&      # Application Error
\&      print $@\->[1];  # error message
\&    } elsif ($@\->[0] eq "EPC\-ERROR") {
\&      # RPC Error
\&      print $@\->[1];  # error message
\&    }
\&  }
.Ve
.PP
\fIquery_methods\fR
.IX Subsection "query_methods"
.PP
.Vb 1
\&  $service\->query_methods();
.Ve
.PP
Define a method which is called by the peer process.
.SS "Server side"
.IX Subsection "Server side"
\fIstart\fR
.IX Subsection "start"
.PP
.Vb 1
\&  $service\->start;
.Ve
.PP
Initialize the connection port and wait for the client connection.
This method starts the event loop and blocks the control.
.SS "Client side"
.IX Subsection "Client side"
\fIclient_start\fR
.IX Subsection "client_start"
.PP
.Vb 1
\&  $service\->client_start;
.Ve
.PP
Establish the connection to the server.
If connection failed, it will die.
.PP
\fIstop\fR
.IX Subsection "stop"
.PP
.Vb 1
\&  $service\->stop;
.Ve
.PP
Shutdown the connection.
.SS "Utilities"
.IX Subsection "Utilities"
\fIto_sexp\fR
.IX Subsection "to_sexp"
.PP
Translate a Perl object into S\-expression string.
In normal use, serializing and unserializing are applied automatically.
.SH "AUTHOR"
.IX Header "AUTHOR"
Masashi Sakurai  \f(CW\*(C`<m.sakurai@kiwanami.net>\*(C'\fR
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
Copyright (c) 2011, 2012 Masashi Sakurai \f(CW\*(C`<m.sakurai@kiwanami.net>\*(C'\fR. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.SH "DISCLAIMER OF WARRANTY"
.IX Header "DISCLAIMER OF WARRANTY"
\&\s-1BECAUSE THIS SOFTWARE IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE SOFTWARE, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE SOFTWARE \*(L"AS IS\*(R" WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE
ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE SOFTWARE IS WITH
YOU. SHOULD THE SOFTWARE PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
NECESSARY SERVICING, REPAIR, OR CORRECTION.\s0
.PP
\&\s-1IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE SOFTWARE AS PERMITTED BY THE ABOVE LICENSE, BE
LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL,
OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
THE SOFTWARE \s0(\s-1INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING
RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A
FAILURE OF THE SOFTWARE TO OPERATE WITH ANY OTHER SOFTWARE\s0), \s-1EVEN IF
SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES.\s0
