#+TITLE: UMLGenerator
#+AUTHOR: Roman Zayrullin
#+EMAIL: krosenmann@gmail.com
#+STARTUP: showall
#+LaTeX_ClASS_OPTIONS: [11pt,a4paper,ubuntu]
#+LaTeX_HEADER:\usepackage[scale=0.75]{geometry}
#+LaTeX_HEADER:\usepackage[utf-8]{inputrec}

* Постановка задачи
  Проходить по файлу и генерировать на основе кода диаграммы с помощью
  plantuml. Показывая места разрешения в диалоговом режиме. ПРи этом
  отображать в буфере текущий код. 

** TODO Переписать с использованием bovinate

* Решение

** Построение диаграммы классов
   Если смотреть на объявление классов в Питоне, то, на самом деле,
   его синтаксическое дерево является достаточно простым. Пто-крайней
   мере, если говорить о построении диаграммы классов на основе
   имеющегося кода. 

   #+begin_src emacs-lisp :tangle yes
     (defclass related-class ()
       ((name :initarg :name)
        (parent :initarg :parent)
        (foreign-key :initarg :foreign-key)
        (fields :initarg :fileds)
        (methods :initarg :methods)
        ))

     (defmethod translate-to-plant ((obj related-class))
       (setq class-plantdia (concat "class " (oref obj name)"{\n"))
       (dolist (elem (oref obj methods))
         (setq class-plantdia (concat class-plantdia elem "()\n")))
       (setq class-plantdia (concat class-plantdia "}\n"))
       class-plantdia)

     (defmethod make-inherit-diagramm ((obj related-class))
       (concat (oref obj parent) " <|-- " (oref obj name)))

     (defmethod attrib-diagramm ((obj related-class))
       (setq val nil)
       (dolist (elem (oref obj foreign-key))
         (setq val (concat val "\n" (car elem) " -- " (oref obj name) ": " (cdr elem) "\n")))
       val)
   #+end_src
   
   С помощью статического анализатора составляем АСТ[fn:1]. Bovinate
   из пакета CEDET разбирает как классы и переменные, так же
   показывает связность модулей (в случае питона, заголовочных файлов
   в случае Си и так далее)
   
   #+begin_src emacs-lisp :tangle yes
     (defun get-synt-tree ()
       (let ((tree))(setq tree (bovinate))
         tree))
    
                      
   #+end_src

   #+RESULTS:
   : 1
   
   По полученному имени класса создавать аналогичный класс plantuml и
   помещать его в созданный временный буфер в plantuml-mode

   #+begin_src emacs-lisp :tangle yes  
     (defun plant-buffer-prepare()
       (setq cur-buf (buffer-name))
       (switch-to-buffer "PlantUml"
        ;; (format "*PlantUml %s*" cur-buf)
                         )
       (plantuml-mode)
       (switch-to-buffer cur-buf)
       )

     (defun plant-translator (word)
       (with-current-buffer "PlantUml"
         (insert
          (concat "class " word " {""\n"))))
     ;; (plant-translator "Todo")
   #+end_src

   #+RESULTS:
   : plant-translator

   Запускается функция из емакса по М-х python-umlclass-generator
   #+begin_src emacs-lisp :tangle yes
   (provide 'python-umlclass-generator)
   #+end_src
   
** TODO Определять енумы и ссылаться на них из модели

** TODO Диалоговый режим работы
   Реализовать на основе Speedbar (скорее всего)

** TODO Косметика

** TODO Проход по папкам и создание областей видимости.

** TODO Связи для унаследованных полей

** TODO Определять вот этих петучей
   #+begin_src python :tangle no
     query = """
             select %(select)s
             from {} as p
             right join {} as q on (p.code = q.product_id)
             left join {} as b on (b.product_id = q.product_id)
             %(where)s
             %(group_by)s
             %(order_by)s
             %(limit)s
         """.format(
             Product._meta.db_table,
             Quantity._meta.db_table,
             TemporaryQuantityBan._meta.db_table,
         )

         def get_objects_count(self):
             from django.db import connections
             cursor = connections['production'].cursor()
             cursor.execute(self.query % {
                 'select': 'count(q.id) as cnt',
                 'where': self.get_where(),
                 'group_by': '',
                 'order_by': '',
                 'limit': '',
             }, [])
             return cursor.fetchone()[0]
   #+end_src

* Footnotes

[fn:1]  Абстрактное синтаксическое дерево

